function varargout = csvwrite(MD,varargin)
% WRITEMETEOFILE(DATA,TIME,LOC,[FILENAME,COMMENTS])
% Generate a meteo-data file with SolarGIS-ish format:
% 
%    # Name: Example [LOC.name]
%    # Latitude: 21.000000 [LOC.latitude, decimal degrees North]
%    # Longitude: -110.000000 [LOC.longitude, decimal degrees East]
%    # Altitude: 1800.0 [LOC.altitude, MASL]
%    # TimeZone: [LOC.TimeZone, or TIMESTAMPS.TimeZone, if available] (*)
%    #
%    # period: yyyy-mm-ddTHH:MM:SSZ/yyyy-mm-ddTHH:MM:SSZ  [ISO 8601] 
%    # summarization: yyyy-mm-ddTHH:MM:SSZ/PTXX           [ISO 8601] 
%    #
%    # [COMMENTS]
%    #
%    # time GHI DHI BNI Ta...
%    2019-03-11T15:30:00Z 100.0 200.0 50.0 20.0 ..
%
% INPUT:
%	DATA - Free field structure. Only [Nt,1] numeric vector fields will be printed to file, where
%       Nt is the number of time-steps set by TIME.
%
%   (*) NOTE: Time labels are printed in UTC (hence the 'Z' marker) no matter what. If available,
%     (as LOC.TimeZone or from a DATETIME object TIME.TimeZone),  will be printed in the
%     header so that time-stamps can be re-cast into the appropriate Time-Zone after file is read.
%
%   FILENAME - Override automatic file-name of the type 'NAME_21N08_104W61_PT60M_2018[..].meteo'
%   COMMENTS - cellstring, free lines to be added to the header.
%
% WRITEMETEOFILE(DATA,TIME,LOC,.., 'tol',1e-4,'delim','\t','hash','#') - Override default precision
%   for floating point numeric fields, delimiter, and/or comment characters.
%
% See also: GETMETEODATA

    import yaml.*
        
    opt.filename = '';
    opt.comments = {};
    opt.sensorsfile = '';
    opt.tol = 1e-4;
    opt.delim = '\t';
    opt.hash = '#';
    opt.path = '';
    opt = getpairedoptions(varargin,opt,'dealrest',2);
    
    opt.comments = cellstr(opt.comments);

    Loc = parselocation(MD.location,'-soft','-useweb'); 
    dt = MD.timestep;
    MD.interval = 'b';
    t = MD.t;

    Nt = numel(t);
    allsrc = [MD.source{:}];
    Nf = numel(allsrc);
    
    filename = opt.filename;
    if isempty(filename)
        t.TimeZone = Loc.TimeZone;
        filename = meteofilename(Loc,t(1),t(end),dt,'suffix','.meteo');
        filename = fullfile(opt.path,filename);
    else
        [path,file,ext] = fileparts(filename);
        if isempty(path), path = opt.path; end
        filename = fullfile(path,[file ext]);
    end
    filename = uniquefilename(filename);

    t.TimeZone = 'UTC';
    timestamps = datestr(t,'yyyy-mm-ddTHH:MM:SS');
    
    header = strjoin([{'time'},allsrc],opt.delim);
    formatstr = cell(1,Nf+1);
    formatstr{1} = '%s';
    
    args = zeros(Nt,numel(allsrc)); % allocate at once
    % args = MD.data{:,:};
    
    decimals = @(x) round(-log10(opt.tol)-log10(max(abs(x(isfinite(x))))));

    for j = 1:Nf
        args(:,j) = MD.getbysource(allsrc{j});

        % choose number of decimals, or scientific notation
        d = decimals(args(:,j));
        if isempty(d) || ~isfinite(d), d = 1; 
        else
            while all(any(round(mod(args(:,j)*10^(d-1),1),1) == [0,1],2)), d = d-1; end
        end
        if abs(d) <= 5
            d = max(0,d);
            formatstr{j+1} = ['%0.' num2str(d) 'f'];
        else
            d = decimals(1);
            formatstr{j+1} = ['%0.' num2str(d) 'e'];
        end
    end
    formatstr = strjoin(formatstr,opt.delim);
    
    % Print to file
    fileID = fopen(filename,'w');
    assert(fileID > 0, 'Could not create/open file for writing');
    foo = onCleanup(@(x) fclose(fileID));

    printcomment = @(comment) fprintf(fileID, [opt.hash ' %s\r\n'],comment);
	printcomment(['File generated by METEODATA.CSVWRITE, ',datestr(now)]);
	printcomment('');
	printcomment(['name: ' Loc.name]);
	printcomment(sprintf('latitude: %0.6f', Loc.latitude));
	printcomment(sprintf('longitude: %0.6f', Loc.longitude));
	printcomment(sprintf('altitude: %0.1f', Loc.altitude));
    printcomment(['timezone: ', Loc.TimeZone]);
    printcomment('');
    printcomment(sprintf('period: %sZ/%sZ',timestamps(1,:),datestr(t(end)+dt,'yyyy-mm-ddTHH:MM:SS')));
	printcomment(['summarization: ','yyyy-mm-ddTHH:MM:SS[Z/' isoduration(dt) ']']);
	printcomment('');
    if ~isempty(opt.comments)
        for j = 1:numel(opt.comments), printcomment(opt.comments{j}); end
        printcomment('');
    end
	printcomment(header);
    arrayfun(@(j) fprintf(fileID,[formatstr '\r\n'],timestamps(j,:),args(j,:)),1:Nt);
    
    if nargout > 0, varargout{1} = filename; end
    
    if isempty(opt.sensorsfile), opt.sensorsfile = fullfile(opt.path,[Loc.name '.sensors']); end
    if ~isequal(opt.sensorsfile,0)
        opt.sensorsfile = uniquefilename(opt.sensorsfile);
        WriteYaml(opt.sensorsfile,struct(MD.sensors),0);
    end
end